(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){guarded=require("../src")},{"../src":5}],2:[function(require,module,exports){(function(){"use strict";var stringify=require("./lib/stringify-anything");module.exports=curry;function curry(f,arity,args){arity=arity||f.length;args=args||[];checkInputs(f,arity,args);return setProp("name",partialName(f,args,arity),setProp("length",arity,function(){var newPartialArgs=Array.prototype.slice.call(arguments);var newArgs=args.concat(newPartialArgs.length?newPartialArgs:[undefined]);return newArgs.length>=arity?f.apply(null,newArgs):setProp("length",arity-newArgs.length,curry(f,arity,newArgs))}))}function checkInputs(f,arity,args){if(typeof f!=="function"){throw Error(stringify(f)+" should be a function")}if(typeof arity!=="number"){throw Error(stringify(arity)+" should be a number")}if(!(args instanceof Array)){throw Error(stringify(args)+" should be an Array")}}function partialName(f,args,n){return f.name?f.name+stringifyArgs(args,n):stringifyArgs(args,n)+"=>"}function stringifyArgs(args,n){return"("+args.map(stringify).concat(Array.apply(null,{length:n-args.length}).map(function(){return""})).join(",")+")"}function setProp(key,value,target){return Object.defineProperty(target,key,{value:value})}})()},{"./lib/stringify-anything":3}],3:[function(require,module,exports){(function(){"use strict";module.exports=stringify;function stringify(anything){if(isPrimitive(anything)){return JSON.stringify(anything)}if(anything===undefined){return"undefined"}if(anything instanceof Function){return anything.name?anything.name+"("+repeat(anything.length,"").join(",")+")":"("+repeat(anything.length,"").join(",")+")=>"}if(anything instanceof RegExp||anything instanceof Error){return anything.toString()}if(anything instanceof Array){return"["+anything.map(stringify).join(",")+"]"}return"{"+zipWith(join,Object.keys(anything),values(anything).map(stringify)).join(",")+"}"}function isPrimitive(x){return x===null||typeof x==="boolean"||typeof x==="number"||typeof x==="string"}function repeat(n,s){return Array.apply(null,{length:n}).map(function(){return s})}function zipWith(f,a1,a2){return a1.map(function(e,i){return f(e,a2[i])})}function values(object){return Object.keys(object).map(function(key){return object[key]})}function join(key,value){return key+":"+value}})()},{}],4:[function(require,module,exports){(function(){"use strict";module.exports=stringify;function stringify(anything){if(isPrimitive(anything)){return JSON.stringify(anything)}if(anything===undefined){return"undefined"}if(anything instanceof Function){return anything.name?anything.name+"("+repeat(anything.length,"").join(",")+")":"("+repeat(anything.length,"").join(",")+")=>"}if(anything instanceof RegExp||anything instanceof Error){return anything.toString()}if(anything instanceof Array){return"["+anything.map(stringify).join(",")+"]"}if(anything instanceof Object){return"{"+zipWith(join,Object.keys(anything),values(anything).map(stringify)).join(",")+"}"}}function isPrimitive(x){return x===null||typeof x==="boolean"||typeof x==="number"||typeof x==="string"}function repeat(n,s){return Array.apply(null,{length:n}).map(function(){return s})}function zipWith(f,a1,a2){return a1.map(function(e,i){return f(e,a2[i])})}function values(object){return Object.keys(object).map(function(key){return object[key]})}function join(key,value){return key+":"+value}})()},{}],5:[function(require,module,exports){(()=>{"use strict";const curry=require("fun-curry");const u=require("./utils");const io=(p,f)=>{const msg=(i,o)=>`(input -> output) pair (${u.show(i)} -> `+`${u.show(o)}) from function ${u.show(f)} failed predicate ${u.show(p)}`;return u.nameAndLength(f,(...input)=>{const output=f.apply(null,input);u.assert(p.bind(null,input),output,msg(input,output));return output})};const inputs=(p,f)=>io((i,o)=>p(i),f);const inputN=(i,p,f)=>inputs(u.b(p,u.get(i)),f);const input=(p,f)=>inputN(0,p,f);const output=(p,f)=>io((i,o)=>p(o),f);const api={io:io,inputs:inputs,inputN:inputN,input:input,output:output};const guards=u.objMap(curry(api.io),{input:(i,o)=>u.nFuns(2)(i)&&u.isFun(o),inputN:(i,o)=>u.and(u.lenEqual(3))(u.b(u.all,u.arrAp([u.and(u.isNum)(u.gte(0)),u.isFun,u.isFun])))(i)&&u.isFun(o),inputs:(i,o)=>u.nFuns(2)(i)&&u.isFun(o),output:(i,o)=>u.nFuns(2)(i)&&u.isFun(o),io:(i,o)=>u.nFuns(2)(i)&&u.isFun(o)});module.exports=u.objMap(curry,u.objAp(guards,api))})()},{"./utils":6,"fun-curry":2}],6:[function(require,module,exports){(function(){"use strict";const stringify=require("stringify-anything");const id=x=>x;const b=(f,g)=>x=>f(g(x));const ite=p=>t=>f=>x=>p(x)?t(x):f(x);const isType=t=>x=>typeof x===t;const isNum=isType("number");const isFun=isType("function");const get=i=>a=>a[i];const arrAp=as=>bs=>as.map((f,i)=>f(bs[i]));const objMap=(f,o)=>Object.keys(o).reduce((a,k)=>{a[k]=f(o[k]);return a},{});const objAp=(fs,o)=>Object.keys(fs).reduce((a,k)=>{a[k]=fs[k](a[k]);return a},o);const all=as=>as.reduce((a,b)=>a&&b,true);const and=f=>g=>x=>f(x)&&g(x);const gte=n=>m=>m>=n;const equal=a=>b=>a===b;const lenEqual=n=>a=>equal(a.length)(n);const allFuns=b(all,arrAp([isFun,isFun]));const nFuns=n=>and(lenEqual(n))(allFuns);const show=x=>`\`${stringify(x)}\``;const format=m=>`A contract with a guarded function has been broken!
${m}`;const toss=message=>()=>{throw Error(message)};const assert=(p,s,msg)=>ite(p)(id)(toss(format(msg)))(s);const setProp=(key,value,target)=>Object.defineProperty(target,key,Object.defineProperty(Object.getOwnPropertyDescriptor(target,key),"value",{value:value}));const nameAndLength=(from,to)=>setProp("length",from.length,setProp("name",from.name,to));module.exports={ite:ite,id:id,toss:toss,show:show,b:b,get:get,format:format,assert:assert,nameAndLength:nameAndLength,isType:isType,isNum:isNum,isFun:isFun,arrAp:arrAp,objMap:objMap,objAp:objAp,all:all,and:and,gte:gte,equal:equal,lenEqual:lenEqual,allFuns:allFuns,nFuns:nFuns}})()},{"stringify-anything":4}]},{},[1]);
