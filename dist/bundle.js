(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){guarded=require("../src")},{"../src":5}],2:[function(require,module,exports){(()=>{"use strict";const isPrimitive=x=>x===null||typeof x==="boolean"||typeof x==="number"||typeof x==="string";const stringify=x=>isPrimitive(x)?JSON.stringify(x):x===undefined?"undefined":x instanceof Function?x.name||"=>":x instanceof RegExp||x instanceof Error?x.toString():x instanceof Array?`[${x.map(stringify).join(",")}]`:`{${Object.keys(x).join(",")}}`;module.exports=stringify})()},{}],3:[function(require,module,exports){(()=>{"use strict";const stringify=require("stringify-anything");const setProp=(key,value,x)=>Object.defineProperty(x,key,{value:value});const setName=(n,x)=>setProp("name",n,x);const setLength=(n,x)=>setProp("length",n,x);const toss=msg=>{throw Error(msg)};const checkInputs=(f,arity,args)=>{if(!(typeof f==="function")){toss(`${stringify(f)} should be a function`)}if(!(typeof arity==="number")){toss(`${stringify(arity)} should be a number`)}if(!(args instanceof Array)){toss(`${stringify(args)} should be an Array`)}};const partialName=(f,args)=>stringify(f)+(!args.length?"":`(${args.map(stringify).join(",")})`);const curry=(f,arity=f.length,args=[])=>{checkInputs(f,arity,args);return setName(partialName(f,args),setLength(arity,(...partialArgs)=>{const newArgs=args.concat(partialArgs.length?partialArgs:[undefined]);return newArgs.length>=arity?f.apply(null,newArgs):setLength(arity-newArgs.length,curry(f,arity,newArgs))}))};module.exports=curry})()},{"stringify-anything":2}],4:[function(require,module,exports){arguments[4][2][0].apply(exports,arguments)},{dup:2}],5:[function(require,module,exports){(()=>{"use strict";const stringify=require("stringify-anything");const curry=require("fun-curry");const empty=as=>as.length===0;const isNum=x=>typeof x==="number";const isFun=x=>typeof x==="function";const objMap=(f,o)=>Object.keys(o).reduce((a,k)=>{a[k]=f(o[k]);return a},{});const show=x=>`\`${stringify(x)}\``;const toss=e=>{throw e};const preface="A contract with a guarded function has been broken!\n";const assert=(p,s,e)=>p(s)?s:toss(e);const setProp=(key,value,target)=>Object.defineProperty(target,key,Object.defineProperty(Object.getOwnPropertyDescriptor(target,key),"value",{value:value}));const nameAndLength=(from,to)=>setProp("length",from.length,setProp("name",from.name,to));const io=(p,f,...rest)=>{assert(isFun,p,Error(preface+`${show(p)} should be a function`));assert(isFun,f,Error(preface+`${show(f)} should be a function`));assert(empty,rest,Error(preface+`Extra arguments passed to io: ${show(rest)}`));return nameAndLength(f,(...input)=>{const output=f(...input);assert(curry(p)(input),output,Error(preface+`(inputs -> output) pair (${show(input)} ->`+` ${show(output)}) from function ${show(f)}`+` failed predicate ${show(p)}`));return output})};const inputs=(p,f,...rest)=>{assert(isFun,p,Error(preface+`${show(p)} should be a function`));assert(isFun,f,Error(preface+`${show(f)} should be a function`));assert(empty,rest,Error(preface+`Extra arguments passed to inputs: ${show(rest)}`));return nameAndLength(f,(...inputs)=>{assert(p,inputs,Error(preface+`inputs ${show(inputs)} to function ${show(f)}`+` failed predicate ${show(p)}`));return f(...inputs)})};const inputN=(i,p,f,...rest)=>{assert(isNum,i,Error(preface+`${show(i)} should be a number`));assert(isFun,p,Error(preface+`${show(p)} should be a function`));assert(isFun,f,Error(preface+`${show(f)} should be a function`));assert(empty,rest,Error(preface+`Extra arguments passed to inputN: ${show(rest)}`));return nameAndLength(f,(...inputs)=>{assert(p,inputs[i],Error(preface+`input ${i} ${show(inputs[i])} to function`+` ${show(f)} failed predicate ${show(p)}`));return f(...inputs)})};const input=(p,f,...rest)=>inputN(0,p,f,...rest);const output=(p,f,...rest)=>{assert(isFun,p,Error(preface+`${show(p)} should be a function`));assert(isFun,f,Error(preface+`${show(f)} should be a function`));assert(empty,rest,Error(preface+`Extra arguments passed to output: ${show(rest)}`));return nameAndLength(f,(...inputs)=>{const output=f(...inputs);assert(p,output,Error(preface+`output ${show(output)} of function ${show(f)}`+` with arguments ${show(inputs)} failed predicate ${show(p)}`));return output})};const api={io:io,inputs:inputs,inputN:inputN,input:input,output:output};module.exports=objMap(curry,api)})()},{"fun-curry":3,"stringify-anything":4}]},{},[1]);
